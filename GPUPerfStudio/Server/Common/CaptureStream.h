//==============================================================================
// Copyright (c) 2013-2015 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  TODO add documentation
//==============================================================================

#ifndef CAPTURESTREAM_H
#define CAPTURESTREAM_H
#include "Capture.h"
#include "mymutex.h"
#include "TimingLog.h"

/// Container that holds and replays captured API calls
class CapturedAPICalls
{
private:

    /// the active device / context
    void* m_pActiveDevice;

protected:

    /// mutex used to be thread safe
    mutex* m_pCapturedAPICallsMutex;

    /// captured calls are pushed back here
    CaptureList m_captureList;

public:

    /// Initializes variables
    CapturedAPICalls()
    {
        m_pCapturedAPICallsMutex = NULL;
        m_pActiveDevice = NULL;
        m_LogCallsAsItReplays = false;
    }

    /// Sets the active device or device context
    /// \param pDevice pointer to the active device / context
    void SetActiveDevice(void* pDevice)
    {
        m_pActiveDevice = pDevice;
    }

    /// Sets the mutex to use in order to be thread safe
    /// \param pMtx the mutex to use
    void SetMutex(mutex* pMtx)
    {
        m_pCapturedAPICallsMutex = pMtx;
    }

    /// returns the stream of captured calls
    /// \return the stream of captured calls
    CaptureList& GetCaptureList()
    {
        return m_captureList;
    }

    /// returns the number of captured calls
    /// \returns the number of captured calls
    size_t Size()
    {
        return m_captureList.size();
    }

    /// Adds a captured call to the stream
    /// \param pCap the captured call
    void Add(Capture* pCap);

    /// Releases all the captured calls in the stream
    void ReleaseCapture();

    /// Plays back the captured calls
    void PlayCapture();

    /// Plays back using an override,
    /// \param pCo the override to apply
    void PlayOverride(CaptureOverride* pCO);

    /// Plays back using a timing override
    /// \param timing the override that will time the calls
    void PlayCaptureAndGetTimingData(TimingLog& timing);

    /// Returns a string containing all the logged timings measured by the timing override
    /// \return the timing log generated by PlayCaptureAndGetTimingData
    std::string GetCaptureLog();

    /// Returns a capture by index
    /// \param index The index to return
    /// \return The Capture or NULL
    Capture* GetCaptureByIndex(unsigned int index)
    {
        unsigned int count = 0 ;

        if (m_captureList.size() <= index)
        {
            return NULL;
        }

        for (CaptureList::iterator iter = m_captureList.begin(); iter != m_captureList.end(); ++iter)
        {
            if (count == index)
            {
                return *iter;
            }

            count++;
        }

        return NULL;
    }

    /// replayed calls will be logged if true
    bool m_LogCallsAsItReplays;
};

#endif
