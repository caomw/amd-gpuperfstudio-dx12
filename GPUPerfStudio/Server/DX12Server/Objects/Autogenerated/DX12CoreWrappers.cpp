//==============================================================================
// Copyright (c) 2015 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  THIS CODE WAS AUTOGENERATED BY PASSTHROUGHGENERATOR ON 05/15/15
//==============================================================================

#include "DX12CoreWrappers.h"
#include "../../DX12LayerManager.h"
#include "../../Interception/DX12Interceptor.h"
#include "../../DX12Defines.h"
#include "../DX12ObjectDatabaseProcessor.h"
#include "../../Util/DX12Utilities.h"
#include "../../SymbolSerializers/DX12Serializers.h"
#include "../DX12CustomWrappers.h"
#include "../DX12CreateInfoStructs.h"
#include "../DXCommonSource/StringifyDxgiFormatEnums.h"

#define ARGUMENTS_BUFFER_SIZE 8192

bool WrapD3D12Object(GPS_ID3D12Device* inParentDevice, ID3D12Object** inRealObject)
{
    return GenericWrapObject<ID3D12Object, GPS_ID3D12Object>(inParentDevice, inRealObject, kObjectType_ID3D12Object, NULL);
}


HRESULT STDMETHODCALLTYPE GPS_ID3D12Object::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealObject->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Object))
        {
            WrapD3D12Object(NULL, (ID3D12Object**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Object::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealObject->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Object::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealObject->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Object::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealObject->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Object::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealObject->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Object::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealObject->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Object::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealObject->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealObject->SetName(Name);
    }

    return result;
}


bool WrapD3D12DeviceChild(GPS_ID3D12Device* inParentDevice, ID3D12DeviceChild** inRealDeviceChild)
{
    return GenericWrapObject<ID3D12DeviceChild, GPS_ID3D12DeviceChild>(inParentDevice, inRealDeviceChild, kObjectType_ID3D12DeviceChild, NULL);
}


HRESULT STDMETHODCALLTYPE GPS_ID3D12DeviceChild::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealDeviceChild->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12DeviceChild))
        {
            WrapD3D12DeviceChild(NULL, (ID3D12DeviceChild**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12DeviceChild::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealDeviceChild->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12DeviceChild::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealDeviceChild->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DeviceChild::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealDeviceChild->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DeviceChild::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealDeviceChild->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DeviceChild::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealDeviceChild->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DeviceChild::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealDeviceChild->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DeviceChild::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealDeviceChild->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealDeviceChild->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}


bool WrapD3D12RootSignature(GPS_ID3D12Device* inParentDevice, ID3D12RootSignature** inRealRootSignature, GPS_ID3D12RootSignatureCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12RootSignature, GPS_ID3D12RootSignature>(inParentDevice, inRealRootSignature, kObjectType_ID3D12RootSignature, inCreateInfo);
}


HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignature::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealRootSignature->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12RootSignature))
        {
            WrapD3D12RootSignature(NULL, (ID3D12RootSignature**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12RootSignature::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealRootSignature->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12RootSignature::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealRootSignature->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignature::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealRootSignature->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignature::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealRootSignature->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignature::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealRootSignature->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignature::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealRootSignature->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignature::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealRootSignature->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignature->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

bool WrapD3D12RootSignatureDeserializer(ID3D12RootSignatureDeserializer** inRealRootSignatureDeserializer, GPS_ID3D12RootSignatureDeserializerCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12RootSignatureDeserializer, GPS_ID3D12RootSignatureDeserializer>(NULL, inRealRootSignatureDeserializer, kObjectType_ID3D12RootSignatureDeserializer, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12RootSignatureDeserializer::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealRootSignatureDeserializer->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignatureDeserializer->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12RootSignatureDeserializer))
        {
            WrapD3D12RootSignatureDeserializer((ID3D12RootSignatureDeserializer**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12RootSignatureDeserializer::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealRootSignatureDeserializer->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignatureDeserializer->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12RootSignatureDeserializer::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealRootSignatureDeserializer->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealRootSignatureDeserializer->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}


bool WrapD3D12Pageable(GPS_ID3D12Device* inParentDevice, ID3D12Pageable** inRealPageable)
{
    return GenericWrapObject<ID3D12Pageable, GPS_ID3D12Pageable>(inParentDevice, inRealPageable, kObjectType_ID3D12Pageable, NULL);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Pageable::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealPageable->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Pageable))
        {
            WrapD3D12Pageable(NULL, (ID3D12Pageable**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Pageable::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealPageable->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Pageable::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealPageable->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Pageable::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealPageable->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Pageable::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealPageable->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Pageable::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealPageable->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Pageable::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealPageable->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Pageable::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealPageable->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealPageable->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

bool WrapD3D12Heap(GPS_ID3D12Device* inParentDevice, ID3D12Heap** inRealHeap, GPS_ID3D12HeapCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12Heap, GPS_ID3D12Heap>(inParentDevice, inRealHeap, kObjectType_ID3D12Heap, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Heap::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealHeap->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Heap))
        {
            WrapD3D12Heap(NULL, (ID3D12Heap**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Heap::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealHeap->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Heap::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealHeap->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Heap::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealHeap->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Heap::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealHeap->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Heap::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealHeap->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Heap::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealHeap->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Heap::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealHeap->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealHeap->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

D3D12_HEAP_DESC STDMETHODCALLTYPE GPS_ID3D12Heap::GetDesc()
{
    D3D12_HEAP_DESC result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Heap_GetDesc);
        result = mRealHeap->GetDesc();
        interceptor->PostCall(this, FuncId_ID3D12Heap_GetDesc, argumentsBuffer);
    }
    else
    {
        result = mRealHeap->GetDesc();
    }

    return result;
}

bool WrapD3D12Resource(GPS_ID3D12Device* inParentDevice, ID3D12Resource** inRealResource, GPS_ID3D12ResourceCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12Resource, GPS_ID3D12Resource>(inParentDevice, inRealResource, kObjectType_ID3D12Resource, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealResource->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Resource))
        {
            WrapD3D12Resource(NULL, (ID3D12Resource**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Resource::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealResource->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Resource::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealResource->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealResource->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealResource->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealResource->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealResource->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealResource->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::Map(UINT Subresource, const D3D12_RANGE* pReadRange, void** ppData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, 0x%p", Subresource, pReadRange, ppData);
        interceptor->PreCall(this, FuncId_ID3D12Resource_Map);
        result = mRealResource->Map(Subresource, pReadRange, ppData);
        interceptor->PostCall(this, FuncId_ID3D12Resource_Map, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->Map(Subresource, pReadRange, ppData);
    }

    return result;
}

void STDMETHODCALLTYPE GPS_ID3D12Resource::Unmap(UINT Subresource, const D3D12_RANGE* pWrittenRange)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p", Subresource, pWrittenRange);
        interceptor->PreCall(this, FuncId_ID3D12Resource_Unmap);
        mRealResource->Unmap(Subresource, pWrittenRange);
        interceptor->PostCall(this, FuncId_ID3D12Resource_Unmap, argumentsBuffer);
    }
    else
    {
        mRealResource->Unmap(Subresource, pWrittenRange);
    }
}

D3D12_RESOURCE_DESC STDMETHODCALLTYPE GPS_ID3D12Resource::GetDesc()
{
    D3D12_RESOURCE_DESC result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Resource_GetDesc);
        result = mRealResource->GetDesc();
        interceptor->PostCall(this, FuncId_ID3D12Resource_GetDesc, argumentsBuffer);
    }
    else
    {
        result = mRealResource->GetDesc();
    }

    return result;
}

D3D12_GPU_VIRTUAL_ADDRESS STDMETHODCALLTYPE GPS_ID3D12Resource::GetGPUVirtualAddress()
{
    D3D12_GPU_VIRTUAL_ADDRESS result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Resource_GetGPUVirtualAddress);
        result = mRealResource->GetGPUVirtualAddress();
        interceptor->PostCall(this, FuncId_ID3D12Resource_GetGPUVirtualAddress, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->GetGPUVirtualAddress();
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::WriteToSubresource(UINT DstSubresource, const D3D12_BOX* pDstBox, const void* pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, 0x%p, %u, %u", DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        interceptor->PreCall(this, FuncId_ID3D12Resource_WriteToSubresource);
        result = mRealResource->WriteToSubresource(DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        interceptor->PostCall(this, FuncId_ID3D12Resource_WriteToSubresource, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->WriteToSubresource(DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::ReadFromSubresource(void* pDstData, UINT DstRowPitch, UINT DstDepthPitch, UINT SrcSubresource, const D3D12_BOX* pSrcBox)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %u, %u, %u, 0x%p", pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
        interceptor->PreCall(this, FuncId_ID3D12Resource_ReadFromSubresource);
        result = mRealResource->ReadFromSubresource(pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
        interceptor->PostCall(this, FuncId_ID3D12Resource_ReadFromSubresource, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->ReadFromSubresource(pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Resource::GetHeapProperties(D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS* pHeapFlags)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %u", pHeapProperties, *pHeapFlags);
        interceptor->PreCall(this, FuncId_ID3D12Resource_GetHeapProperties);
        result = mRealResource->GetHeapProperties(pHeapProperties, pHeapFlags);
        interceptor->PostCall(this, FuncId_ID3D12Resource_GetHeapProperties, argumentsBuffer, result);
    }
    else
    {
        result = mRealResource->GetHeapProperties(pHeapProperties, pHeapFlags);
    }

    return result;
}

bool WrapD3D12CommandAllocator(GPS_ID3D12Device* inParentDevice, ID3D12CommandAllocator** inRealCommandAllocator, GPS_ID3D12CommandAllocatorCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12CommandAllocator, GPS_ID3D12CommandAllocator>(inParentDevice, inRealCommandAllocator, kObjectType_ID3D12CommandAllocator, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealCommandAllocator->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandAllocator))
        {
            WrapD3D12CommandAllocator(NULL, (ID3D12CommandAllocator**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealCommandAllocator->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealCommandAllocator->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealCommandAllocator->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealCommandAllocator->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealCommandAllocator->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealCommandAllocator->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealCommandAllocator->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandAllocator::Reset()
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12CommandAllocator_Reset);
        result = mRealCommandAllocator->Reset();
        interceptor->PostCall(this, FuncId_ID3D12CommandAllocator_Reset, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandAllocator->Reset();
    }

    return result;
}

bool WrapD3D12Fence(GPS_ID3D12Device* inParentDevice, ID3D12Fence** inRealFence, GPS_ID3D12FenceCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12Fence, GPS_ID3D12Fence>(inParentDevice, inRealFence, kObjectType_ID3D12Fence, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealFence->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Fence))
        {
            WrapD3D12Fence(NULL, (ID3D12Fence**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Fence::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealFence->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Fence::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealFence->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealFence->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealFence->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealFence->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealFence->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealFence->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

UINT64 STDMETHODCALLTYPE GPS_ID3D12Fence::GetCompletedValue()
{
    UINT64 result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Fence_GetCompletedValue);
        result = mRealFence->GetCompletedValue();
        interceptor->PostCall(this, FuncId_ID3D12Fence_GetCompletedValue, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->GetCompletedValue();
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::SetEventOnCompletion(UINT64 Value, HANDLE hEvent)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%llu, 0x%p", Value, hEvent);
        interceptor->PreCall(this, FuncId_ID3D12Fence_SetEventOnCompletion);
        result = mRealFence->SetEventOnCompletion(Value, hEvent);
        interceptor->PostCall(this, FuncId_ID3D12Fence_SetEventOnCompletion, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->SetEventOnCompletion(Value, hEvent);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Fence::Signal(UINT64 Value)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%llu", Value);
        interceptor->PreCall(this, FuncId_ID3D12Fence_Signal);
        result = mRealFence->Signal(Value);
        interceptor->PostCall(this, FuncId_ID3D12Fence_Signal, argumentsBuffer, result);
    }
    else
    {
        result = mRealFence->Signal(Value);
    }

    return result;
}

bool WrapD3D12PipelineState(GPS_ID3D12Device* inParentDevice, ID3D12PipelineState** inRealPipelineState, GPS_ID3D12PipelineStateCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12PipelineState, GPS_ID3D12PipelineState>(inParentDevice, inRealPipelineState, kObjectType_ID3D12PipelineState, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealPipelineState->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12PipelineState))
        {
            WrapD3D12PipelineState(NULL, (ID3D12PipelineState**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12PipelineState::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealPipelineState->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12PipelineState::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealPipelineState->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealPipelineState->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealPipelineState->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealPipelineState->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealPipelineState->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealPipelineState->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12PipelineState::GetCachedBlob(ID3DBlob** ppBlob)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p", ppBlob);
        interceptor->PreCall(this, FuncId_ID3D12PipelineState_GetCachedBlob);
        result = mRealPipelineState->GetCachedBlob(ppBlob);
        interceptor->PostCall(this, FuncId_ID3D12PipelineState_GetCachedBlob, argumentsBuffer, result);
    }
    else
    {
        result = mRealPipelineState->GetCachedBlob(ppBlob);
    }

    return result;
}

bool WrapD3D12DescriptorHeap(GPS_ID3D12Device* inParentDevice, ID3D12DescriptorHeap** inRealDescriptorHeap, GPS_ID3D12DescriptorHeapCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12DescriptorHeap, GPS_ID3D12DescriptorHeap>(inParentDevice, inRealDescriptorHeap, kObjectType_ID3D12DescriptorHeap, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealDescriptorHeap->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12DescriptorHeap))
        {
            WrapD3D12DescriptorHeap(NULL, (ID3D12DescriptorHeap**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealDescriptorHeap->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealDescriptorHeap->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealDescriptorHeap->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealDescriptorHeap->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealDescriptorHeap->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealDescriptorHeap->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealDescriptorHeap->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealDescriptorHeap->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

D3D12_DESCRIPTOR_HEAP_DESC STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::GetDesc()
{
    D3D12_DESCRIPTOR_HEAP_DESC result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12DescriptorHeap_GetDesc);
        result = mRealDescriptorHeap->GetDesc();
        interceptor->PostCall(this, FuncId_ID3D12DescriptorHeap_GetDesc, argumentsBuffer);
    }
    else
    {
        result = mRealDescriptorHeap->GetDesc();
    }

    return result;
}

D3D12_CPU_DESCRIPTOR_HANDLE STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::GetCPUDescriptorHandleForHeapStart()
{
    D3D12_CPU_DESCRIPTOR_HANDLE result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12DescriptorHeap_GetCPUDescriptorHandleForHeapStart);
        result = mRealDescriptorHeap->GetCPUDescriptorHandleForHeapStart();
        interceptor->PostCall(this, FuncId_ID3D12DescriptorHeap_GetCPUDescriptorHandleForHeapStart, argumentsBuffer);
    }
    else
    {
        result = mRealDescriptorHeap->GetCPUDescriptorHandleForHeapStart();
    }

    return result;
}

D3D12_GPU_DESCRIPTOR_HANDLE STDMETHODCALLTYPE GPS_ID3D12DescriptorHeap::GetGPUDescriptorHandleForHeapStart()
{
    D3D12_GPU_DESCRIPTOR_HANDLE result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12DescriptorHeap_GetGPUDescriptorHandleForHeapStart);
        result = mRealDescriptorHeap->GetGPUDescriptorHandleForHeapStart();
        interceptor->PostCall(this, FuncId_ID3D12DescriptorHeap_GetGPUDescriptorHandleForHeapStart, argumentsBuffer);
    }
    else
    {
        result = mRealDescriptorHeap->GetGPUDescriptorHandleForHeapStart();
    }

    return result;
}

bool WrapD3D12QueryHeap(GPS_ID3D12Device* inParentDevice, ID3D12QueryHeap** inRealQueryHeap, GPS_ID3D12QueryHeapCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12QueryHeap, GPS_ID3D12QueryHeap>(inParentDevice, inRealQueryHeap, kObjectType_ID3D12QueryHeap, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12QueryHeap::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealQueryHeap->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12QueryHeap))
        {
            WrapD3D12QueryHeap(NULL, (ID3D12QueryHeap**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12QueryHeap::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealQueryHeap->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12QueryHeap::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealQueryHeap->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12QueryHeap::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealQueryHeap->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12QueryHeap::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealQueryHeap->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12QueryHeap::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealQueryHeap->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12QueryHeap::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealQueryHeap->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12QueryHeap::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealQueryHeap->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealQueryHeap->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

bool WrapD3D12CommandSignature(GPS_ID3D12Device* inParentDevice, ID3D12CommandSignature** inRealCommandSignature, GPS_ID3D12CommandSignatureCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12CommandSignature, GPS_ID3D12CommandSignature>(inParentDevice, inRealCommandSignature, kObjectType_ID3D12CommandSignature, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandSignature::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealCommandSignature->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandSignature))
        {
            WrapD3D12CommandSignature(NULL, (ID3D12CommandSignature**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandSignature::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealCommandSignature->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandSignature::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealCommandSignature->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandSignature::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealCommandSignature->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandSignature::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealCommandSignature->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandSignature::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealCommandSignature->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandSignature::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealCommandSignature->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandSignature::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealCommandSignature->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandSignature->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

bool WrapD3D12CommandList(GPS_ID3D12Device* inParentDevice, ID3D12CommandList** inRealCommandList, GPS_ID3D12CommandListCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12CommandList, GPS_ID3D12CommandList>(inParentDevice, inRealCommandList, kObjectType_ID3D12CommandList, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandList::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealCommandList->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandList))
        {
            WrapD3D12CommandList(NULL, (ID3D12CommandList**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandList::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealCommandList->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandList::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealCommandList->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandList::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealCommandList->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandList::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealCommandList->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandList::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealCommandList->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandList::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealCommandList->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandList::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealCommandList->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

D3D12_COMMAND_LIST_TYPE STDMETHODCALLTYPE GPS_ID3D12CommandList::GetType()
{
    D3D12_COMMAND_LIST_TYPE result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12CommandList_GetType);
        result = mRealCommandList->GetType();
        interceptor->PostCall(this, FuncId_ID3D12CommandList_GetType, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandList->GetType();
    }

    return result;
}

bool WrapD3D12GraphicsCommandList(GPS_ID3D12Device* inParentDevice, ID3D12GraphicsCommandList** inRealGraphicsCommandList, GPS_ID3D12CommandListCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12GraphicsCommandList, GPS_ID3D12GraphicsCommandListCustom>(inParentDevice, inRealGraphicsCommandList, kObjectType_ID3D12GraphicsCommandList, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealGraphicsCommandList->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12GraphicsCommandList))
        {
            WrapD3D12GraphicsCommandList(NULL, (ID3D12GraphicsCommandList**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealGraphicsCommandList->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealGraphicsCommandList->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealGraphicsCommandList->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealGraphicsCommandList->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealGraphicsCommandList->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealGraphicsCommandList->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealGraphicsCommandList->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

D3D12_COMMAND_LIST_TYPE STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::GetType()
{
    D3D12_COMMAND_LIST_TYPE result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12CommandList_GetType);
        result = mRealGraphicsCommandList->GetType();
        interceptor->PostCall(this, FuncId_ID3D12CommandList_GetType, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->GetType();
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::Close()
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_Close);
        result = mRealGraphicsCommandList->Close();
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_Close, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->Close();
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
{
    HRESULT result = {};
    ID3D12CommandAllocator* pAllocatorUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pAllocator, &(pAllocatorUnwrapped), true);
    ID3D12PipelineState* pInitialStateUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pInitialState, &(pInitialStateUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, +0x%p", pAllocator, pInitialState);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_Reset);
        result = mRealGraphicsCommandList->Reset(pAllocatorUnwrapped, pInitialStateUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_Reset, argumentsBuffer, result);
    }
    else
    {
        result = mRealGraphicsCommandList->Reset(pAllocatorUnwrapped, pInitialStateUnwrapped);
    }

    return result;
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ClearState(ID3D12PipelineState* pPipelineState)
{
    ID3D12PipelineState* pPipelineStateUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pPipelineState, &(pPipelineStateUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p", pPipelineState);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ClearState);
        mRealGraphicsCommandList->ClearState(pPipelineStateUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ClearState, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ClearState(pPipelineStateUnwrapped);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, %u, %u", VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_DrawInstanced);
        mRealGraphicsCommandList->DrawInstanced(VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_DrawInstanced, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->DrawInstanced(VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, %u, %d, %u", IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_DrawIndexedInstanced);
        mRealGraphicsCommandList->DrawIndexedInstanced(IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_DrawIndexedInstanced, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->DrawIndexedInstanced(IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::Dispatch(UINT ThreadGroupCountX, UINT ThreadGroupCountY, UINT ThreadGroupCountZ)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, %u", ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_Dispatch);
        mRealGraphicsCommandList->Dispatch(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_Dispatch, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->Dispatch(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::CopyBufferRegion(ID3D12Resource* pDstBuffer, UINT64 DstOffset, ID3D12Resource* pSrcBuffer, UINT64 SrcOffset, UINT64 NumBytes)
{
    ID3D12Resource* pDstBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pDstBuffer, &(pDstBufferUnwrapped), true);
    ID3D12Resource* pSrcBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pSrcBuffer, &(pSrcBufferUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %llu, +0x%p, %llu, %llu", pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_CopyBufferRegion);
        mRealGraphicsCommandList->CopyBufferRegion(pDstBufferUnwrapped, DstOffset, pSrcBufferUnwrapped, SrcOffset, NumBytes);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_CopyBufferRegion, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->CopyBufferRegion(pDstBufferUnwrapped, DstOffset, pSrcBufferUnwrapped, SrcOffset, NumBytes);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::CopyTextureRegion(const D3D12_TEXTURE_COPY_LOCATION* pDst, UINT DstX, UINT DstY, UINT DstZ, const D3D12_TEXTURE_COPY_LOCATION* pSrc, const D3D12_BOX* pSrcBox)
{
    D3D12_TEXTURE_COPY_LOCATION pDstUnwrapped;
    DX12DeepCopy::Instance()->DeepCopy(pDst, &pDstUnwrapped, true);
    D3D12_TEXTURE_COPY_LOCATION pSrcUnwrapped;
    DX12DeepCopy::Instance()->DeepCopy(pSrc, &pSrcUnwrapped, true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %u, %u, %u, 0x%p, 0x%p", pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_CopyTextureRegion);
        mRealGraphicsCommandList->CopyTextureRegion(&pDstUnwrapped, DstX, DstY, DstZ, &pSrcUnwrapped, pSrcBox);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_CopyTextureRegion, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->CopyTextureRegion(&pDstUnwrapped, DstX, DstY, DstZ, &pSrcUnwrapped, pSrcBox);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
{
    ID3D12Resource* pDstResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pDstResource, &(pDstResourceUnwrapped), true);
    ID3D12Resource* pSrcResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pSrcResource, &(pSrcResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, +0x%p", pDstResource, pSrcResource);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_CopyResource);
        mRealGraphicsCommandList->CopyResource(pDstResourceUnwrapped, pSrcResourceUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_CopyResource, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->CopyResource(pDstResourceUnwrapped, pSrcResourceUnwrapped);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::CopyTiles(ID3D12Resource* pTiledResource, const D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, const D3D12_TILE_REGION_SIZE* pTileRegionSize, ID3D12Resource* pBuffer, UINT64 BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
{
    ID3D12Resource* pTiledResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pTiledResource, &(pTiledResourceUnwrapped), true);
    ID3D12Resource* pBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pBuffer, &(pBufferUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p, 0x%p, +0x%p, %llu, %u", pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_CopyTiles);
        mRealGraphicsCommandList->CopyTiles(pTiledResourceUnwrapped, pTileRegionStartCoordinate, pTileRegionSize, pBufferUnwrapped, BufferStartOffsetInBytes, Flags);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_CopyTiles, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->CopyTiles(pTiledResourceUnwrapped, pTileRegionStartCoordinate, pTileRegionSize, pBufferUnwrapped, BufferStartOffsetInBytes, Flags);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ResolveSubresource(ID3D12Resource* pDstResource, UINT DstSubresource, ID3D12Resource* pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format)
{
    ID3D12Resource* pDstResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pDstResource, &(pDstResourceUnwrapped), true);
    ID3D12Resource* pSrcResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pSrcResource, &(pSrcResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        gtASCIIString dxgiFormat = Stringify_DXGI_FORMAT(Format);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %u, +0x%p, %u, %s", pDstResource, DstSubresource, pSrcResource, SrcSubresource, dxgiFormat.asCharArray());
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ResolveSubresource);
        mRealGraphicsCommandList->ResolveSubresource(pDstResourceUnwrapped, DstSubresource, pSrcResourceUnwrapped, SrcSubresource, Format);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ResolveSubresource, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ResolveSubresource(pDstResourceUnwrapped, DstSubresource, pSrcResourceUnwrapped, SrcSubresource, Format);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY PrimitiveTopology)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s", DX12CustomSerializers::WritePrimitiveTopology(PrimitiveTopology));
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_IASetPrimitiveTopology);
        mRealGraphicsCommandList->IASetPrimitiveTopology(PrimitiveTopology);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_IASetPrimitiveTopology, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->IASetPrimitiveTopology(PrimitiveTopology);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::RSSetViewports(UINT NumViewports, const D3D12_VIEWPORT* pViewports)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p", NumViewports, pViewports);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_RSSetViewports);
        mRealGraphicsCommandList->RSSetViewports(NumViewports, pViewports);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_RSSetViewports, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->RSSetViewports(NumViewports, pViewports);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::RSSetScissorRects(UINT NumRects, const D3D12_RECT* pRects)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p", NumRects, pRects);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_RSSetScissorRects);
        mRealGraphicsCommandList->RSSetScissorRects(NumRects, pRects);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_RSSetScissorRects, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->RSSetScissorRects(NumRects, pRects);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::OMSetBlendFactor(const FLOAT BlendFactor[ 4 ])
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s", PrintArrayWithFormatter(4, BlendFactor, "%f").c_str());
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_OMSetBlendFactor);
        mRealGraphicsCommandList->OMSetBlendFactor(BlendFactor);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_OMSetBlendFactor, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->OMSetBlendFactor(BlendFactor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::OMSetStencilRef(UINT StencilRef)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u", StencilRef);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_OMSetStencilRef);
        mRealGraphicsCommandList->OMSetStencilRef(StencilRef);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_OMSetStencilRef, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->OMSetStencilRef(StencilRef);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetPipelineState(ID3D12PipelineState* pPipelineState)
{
    ID3D12PipelineState* pPipelineStateUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pPipelineState, &(pPipelineStateUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p", pPipelineState);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetPipelineState);
        mRealGraphicsCommandList->SetPipelineState(pPipelineStateUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetPipelineState, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetPipelineState(pPipelineStateUnwrapped);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ResourceBarrier(UINT NumBarriers, const D3D12_RESOURCE_BARRIER* pBarriers)
{
    D3D12_RESOURCE_BARRIER* descs = NULL;

    if (NumBarriers > 0)
    {
        descs = new D3D12_RESOURCE_BARRIER[NumBarriers];

        for (UINT index = 0; index < NumBarriers; index++)
        {
            DX12DeepCopy::Instance()->DeepCopy(&(pBarriers[index]), &(descs[index]), true);
        }
    }

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p", NumBarriers, pBarriers);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ResourceBarrier);
        mRealGraphicsCommandList->ResourceBarrier(NumBarriers, descs);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ResourceBarrier, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ResourceBarrier(NumBarriers, descs);
    }

    SAFE_DELETE_ARRAY(descs);
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
{
    ID3D12GraphicsCommandList* pCommandListUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pCommandList, &(pCommandListUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p", pCommandList);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ExecuteBundle);
        mRealGraphicsCommandList->ExecuteBundle(pCommandListUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ExecuteBundle, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ExecuteBundle(pCommandListUnwrapped);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetDescriptorHeaps(UINT NumDescriptorHeaps, ID3D12DescriptorHeap*const * ppDescriptorHeaps)
{
    ID3D12DescriptorHeap** pDescriptorHeapsUnwrapped = NULL;

    if (NumDescriptorHeaps > 0)
    {
        pDescriptorHeapsUnwrapped = new ID3D12DescriptorHeap*[NumDescriptorHeaps];

        for (UINT index = 0; index < NumDescriptorHeaps; index++)
        {
            DX12DeepCopy::Instance()->AssignInterface(ppDescriptorHeaps[index], &(pDescriptorHeapsUnwrapped[index]), true);
        }
    }

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s", NumDescriptorHeaps, PrintArrayWithFormatter(NumDescriptorHeaps, ppDescriptorHeaps, "+0x%p").c_str());
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetDescriptorHeaps);
        mRealGraphicsCommandList->SetDescriptorHeaps(NumDescriptorHeaps, pDescriptorHeapsUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetDescriptorHeaps, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetDescriptorHeaps(NumDescriptorHeaps, pDescriptorHeapsUnwrapped);
    }

    SAFE_DELETE_ARRAY(pDescriptorHeapsUnwrapped);
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
{
    ID3D12RootSignature* pRootSignatureUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pRootSignature, &(pRootSignatureUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p", pRootSignature);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootSignature);
        mRealGraphicsCommandList->SetComputeRootSignature(pRootSignatureUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootSignature, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRootSignature(pRootSignatureUnwrapped);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
{
    ID3D12RootSignature* pRootSignatureUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pRootSignature, &(pRootSignatureUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p", pRootSignature);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootSignature);
        mRealGraphicsCommandList->SetGraphicsRootSignature(pRootSignatureUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootSignature, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRootSignature(pRootSignatureUnwrapped);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRootDescriptorTable(UINT RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p", RootParameterIndex, (void*)BaseDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootDescriptorTable);
        mRealGraphicsCommandList->SetComputeRootDescriptorTable(RootParameterIndex, BaseDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootDescriptorTable, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRootDescriptorTable(RootParameterIndex, BaseDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRootDescriptorTable(UINT RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p", RootParameterIndex, (void*)BaseDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootDescriptorTable);
        mRealGraphicsCommandList->SetGraphicsRootDescriptorTable(RootParameterIndex, BaseDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootDescriptorTable, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRootDescriptorTable(RootParameterIndex, BaseDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRoot32BitConstant(UINT RootParameterIndex, UINT SrcData, UINT DestOffsetIn32BitValues)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, %u", RootParameterIndex, SrcData, DestOffsetIn32BitValues);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRoot32BitConstant);
        mRealGraphicsCommandList->SetComputeRoot32BitConstant(RootParameterIndex, SrcData, DestOffsetIn32BitValues);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRoot32BitConstant, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRoot32BitConstant(RootParameterIndex, SrcData, DestOffsetIn32BitValues);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstant(UINT RootParameterIndex, UINT SrcData, UINT DestOffsetIn32BitValues)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, %u", RootParameterIndex, SrcData, DestOffsetIn32BitValues);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstant);
        mRealGraphicsCommandList->SetGraphicsRoot32BitConstant(RootParameterIndex, SrcData, DestOffsetIn32BitValues);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstant, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRoot32BitConstant(RootParameterIndex, SrcData, DestOffsetIn32BitValues);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRoot32BitConstants(UINT RootParameterIndex, UINT Num32BitValuesToSet, const void* pSrcData, UINT DestOffsetIn32BitValues)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, 0x%p, %u", RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRoot32BitConstants);
        mRealGraphicsCommandList->SetComputeRoot32BitConstants(RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRoot32BitConstants, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRoot32BitConstants(RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstants(UINT RootParameterIndex, UINT Num32BitValuesToSet, const void* pSrcData, UINT DestOffsetIn32BitValues)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, 0x%p, %u", RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstants);
        mRealGraphicsCommandList->SetGraphicsRoot32BitConstants(RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstants, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRoot32BitConstants(RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRootConstantBufferView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %llu", RootParameterIndex, BufferLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootConstantBufferView);
        mRealGraphicsCommandList->SetComputeRootConstantBufferView(RootParameterIndex, BufferLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootConstantBufferView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRootConstantBufferView(RootParameterIndex, BufferLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRootConstantBufferView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %llu", RootParameterIndex, BufferLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootConstantBufferView);
        mRealGraphicsCommandList->SetGraphicsRootConstantBufferView(RootParameterIndex, BufferLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootConstantBufferView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRootConstantBufferView(RootParameterIndex, BufferLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %llu", RootParameterIndex, BufferLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootShaderResourceView);
        mRealGraphicsCommandList->SetComputeRootShaderResourceView(RootParameterIndex, BufferLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootShaderResourceView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRootShaderResourceView(RootParameterIndex, BufferLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %llu", RootParameterIndex, BufferLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootShaderResourceView);
        mRealGraphicsCommandList->SetGraphicsRootShaderResourceView(RootParameterIndex, BufferLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootShaderResourceView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRootShaderResourceView(RootParameterIndex, BufferLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetComputeRootUnorderedAccessView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %llu", RootParameterIndex, BufferLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootUnorderedAccessView);
        mRealGraphicsCommandList->SetComputeRootUnorderedAccessView(RootParameterIndex, BufferLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetComputeRootUnorderedAccessView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetComputeRootUnorderedAccessView(RootParameterIndex, BufferLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetGraphicsRootUnorderedAccessView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %llu", RootParameterIndex, BufferLocation);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootUnorderedAccessView);
        mRealGraphicsCommandList->SetGraphicsRootUnorderedAccessView(RootParameterIndex, BufferLocation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetGraphicsRootUnorderedAccessView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetGraphicsRootUnorderedAccessView(RootParameterIndex, BufferLocation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::IASetIndexBuffer(const D3D12_INDEX_BUFFER_VIEW* pView)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p", pView);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_IASetIndexBuffer);
        mRealGraphicsCommandList->IASetIndexBuffer(pView);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_IASetIndexBuffer, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->IASetIndexBuffer(pView);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::IASetVertexBuffers(UINT StartSlot, UINT NumViews, const D3D12_VERTEX_BUFFER_VIEW* pViews)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, 0x%p", StartSlot, NumViews, pViews);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_IASetVertexBuffers);
        mRealGraphicsCommandList->IASetVertexBuffers(StartSlot, NumViews, pViews);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_IASetVertexBuffers, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->IASetVertexBuffers(StartSlot, NumViews, pViews);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SOSetTargets(UINT StartSlot, UINT NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, 0x%p", StartSlot, NumViews, pViews);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SOSetTargets);
        mRealGraphicsCommandList->SOSetTargets(StartSlot, NumViews, pViews);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SOSetTargets, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SOSetTargets(StartSlot, NumViews, pViews);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::OMSetRenderTargets(UINT NumRenderTargetDescriptors, const D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, BOOL RTsSingleHandleToDescriptorRange, const D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, %s, 0x%p", NumRenderTargetDescriptors, pRenderTargetDescriptors, DX12Util::PrintBool(RTsSingleHandleToDescriptorRange), pDepthStencilDescriptor);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_OMSetRenderTargets);
        mRealGraphicsCommandList->OMSetRenderTargets(NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_OMSetRenderTargets, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->OMSetRenderTargets(NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const D3D12_RECT* pRects)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %u, %f, %hhu, %u, 0x%p", (void*)DepthStencilView.ptr, ClearFlags, Depth, Stencil, NumRects, pRects);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ClearDepthStencilView);
        mRealGraphicsCommandList->ClearDepthStencilView(DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ClearDepthStencilView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ClearDepthStencilView(DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const FLOAT ColorRGBA[ 4 ], UINT NumRects, const D3D12_RECT* pRects)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, %u, 0x%p", (void*)RenderTargetView.ptr, PrintArrayWithFormatter(4, ColorRGBA, "%f").c_str(), NumRects, pRects);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ClearRenderTargetView);
        mRealGraphicsCommandList->ClearRenderTargetView(RenderTargetView, ColorRGBA, NumRects, pRects);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ClearRenderTargetView, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ClearRenderTargetView(RenderTargetView, ColorRGBA, NumRects, pRects);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource* pResource, const UINT Values[ 4 ], UINT NumRects, const D3D12_RECT* pRects)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, 0x%p, +0x%p, %s, %u, 0x%p", (void*)ViewGPUHandleInCurrentHeap.ptr, (void*)ViewCPUHandle.ptr, pResource, PrintArrayWithFormatter(4, Values, "%u").c_str(), NumRects, pRects);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ClearUnorderedAccessViewUint);
        mRealGraphicsCommandList->ClearUnorderedAccessViewUint(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResourceUnwrapped, Values, NumRects, pRects);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ClearUnorderedAccessViewUint, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ClearUnorderedAccessViewUint(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResourceUnwrapped, Values, NumRects, pRects);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource* pResource, const FLOAT Values[ 4 ], UINT NumRects, const D3D12_RECT* pRects)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, 0x%p, +0x%p, %s, %u, 0x%p", (void*)ViewGPUHandleInCurrentHeap.ptr, (void*)ViewCPUHandle.ptr, pResource, PrintArrayWithFormatter(4, Values, "%f").c_str(), NumRects, pRects);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ClearUnorderedAccessViewFloat);
        mRealGraphicsCommandList->ClearUnorderedAccessViewFloat(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResourceUnwrapped, Values, NumRects, pRects);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ClearUnorderedAccessViewFloat, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ClearUnorderedAccessViewFloat(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResourceUnwrapped, Values, NumRects, pRects);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::DiscardResource(ID3D12Resource* pResource, const D3D12_DISCARD_REGION* pRegion)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p", pResource, pRegion);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_DiscardResource);
        mRealGraphicsCommandList->DiscardResource(pResourceUnwrapped, pRegion);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_DiscardResource, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->DiscardResource(pResourceUnwrapped, pRegion);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::BeginQuery(ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, UINT Index)
{
    ID3D12QueryHeap* pQueryHeapUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pQueryHeap, &(pQueryHeapUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %s, %u", pQueryHeap, DX12CoreSerializers::WriteQueryTypeEnumAsString(Type), Index);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_BeginQuery);
        mRealGraphicsCommandList->BeginQuery(pQueryHeapUnwrapped, Type, Index);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_BeginQuery, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->BeginQuery(pQueryHeapUnwrapped, Type, Index);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::EndQuery(ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, UINT Index)
{
    ID3D12QueryHeap* pQueryHeapUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pQueryHeap, &(pQueryHeapUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %s, %u", pQueryHeap, DX12CoreSerializers::WriteQueryTypeEnumAsString(Type), Index);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_EndQuery);
        mRealGraphicsCommandList->EndQuery(pQueryHeapUnwrapped, Type, Index);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_EndQuery, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->EndQuery(pQueryHeapUnwrapped, Type, Index);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ResolveQueryData(ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, UINT StartIndex, UINT NumQueries, ID3D12Resource* pDestinationBuffer, UINT64 AlignedDestinationBufferOffset)
{
    ID3D12QueryHeap* pQueryHeapUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pQueryHeap, &(pQueryHeapUnwrapped), true);
    ID3D12Resource* pDestinationBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pDestinationBuffer, &(pDestinationBufferUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %s, %u, %u, +0x%p, %llu", pQueryHeap, DX12CoreSerializers::WriteQueryTypeEnumAsString(Type), StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ResolveQueryData);
        mRealGraphicsCommandList->ResolveQueryData(pQueryHeapUnwrapped, Type, StartIndex, NumQueries, pDestinationBufferUnwrapped, AlignedDestinationBufferOffset);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ResolveQueryData, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ResolveQueryData(pQueryHeapUnwrapped, Type, StartIndex, NumQueries, pDestinationBufferUnwrapped, AlignedDestinationBufferOffset);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetPredication(ID3D12Resource* pBuffer, UINT64 AlignedBufferOffset, D3D12_PREDICATION_OP Operation)
{
    ID3D12Resource* pBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pBuffer, &(pBufferUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %llu, %s", pBuffer, AlignedBufferOffset, DX12CoreSerializers::WritePredicationOpEnumAsString(Operation));
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetPredication);
        mRealGraphicsCommandList->SetPredication(pBufferUnwrapped, AlignedBufferOffset, Operation);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetPredication, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetPredication(pBufferUnwrapped, AlignedBufferOffset, Operation);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::SetMarker(UINT Metadata, const void* pData, UINT Size)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, %u", Metadata, pData, Size);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_SetMarker);
        mRealGraphicsCommandList->SetMarker(Metadata, pData, Size);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_SetMarker, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->SetMarker(Metadata, pData, Size);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::BeginEvent(UINT Metadata, const void* pData, UINT Size)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %ls, %u", Metadata, static_cast<const wchar_t*>(pData), Size);

        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_BeginEvent);
        mRealGraphicsCommandList->BeginEvent(Metadata, pData, Size);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_BeginEvent, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->BeginEvent(Metadata, pData, Size);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::EndEvent()
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_EndEvent);
        mRealGraphicsCommandList->EndEvent();
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_EndEvent, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->EndEvent();
    }
}

void STDMETHODCALLTYPE GPS_ID3D12GraphicsCommandList::ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, UINT MaxCommandCount, ID3D12Resource* pArgumentBuffer, UINT64 ArgumentBufferOffset, ID3D12Resource* pCountBuffer, UINT64 CountBufferOffset)
{

    ID3D12CommandSignature* pCommandSignatureUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pCommandSignature, &(pCommandSignatureUnwrapped), true);
    ID3D12Resource* pArgumentBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pArgumentBuffer, &(pArgumentBufferUnwrapped), true);
    ID3D12Resource* pCountBufferUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pCountBuffer, &(pCountBufferUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %u, +0x%p, %llu, +0x%p, %llu", pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
        interceptor->PreCall(this, FuncId_ID3D12GraphicsCommandList_ExecuteIndirect);
        mRealGraphicsCommandList->ExecuteIndirect(pCommandSignatureUnwrapped, MaxCommandCount, pArgumentBufferUnwrapped, ArgumentBufferOffset, pCountBufferUnwrapped, CountBufferOffset);
        interceptor->PostCall(this, FuncId_ID3D12GraphicsCommandList_ExecuteIndirect, argumentsBuffer);
    }
    else
    {
        mRealGraphicsCommandList->ExecuteIndirect(pCommandSignatureUnwrapped, MaxCommandCount, pArgumentBufferUnwrapped, ArgumentBufferOffset, pCountBufferUnwrapped, CountBufferOffset);
    }
}

bool WrapD3D12CommandQueue(GPS_ID3D12Device* inParentDevice, ID3D12CommandQueue** inRealCommandQueue, GPS_ID3D12CommandQueueCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12CommandQueue, GPS_ID3D12CommandQueueCustom>(inParentDevice, inRealCommandQueue, kObjectType_ID3D12CommandQueue, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealCommandQueue->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandQueue))
        {
            WrapD3D12CommandQueue(NULL, (ID3D12CommandQueue**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandQueue::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealCommandQueue->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12CommandQueue::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealCommandQueue->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealCommandQueue->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealCommandQueue->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealCommandQueue->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealCommandQueue->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->SetName(Name);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::GetDevice(REFIID riid, void** ppvDevice)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvDevice);
        interceptor->PreCall(this, FuncId_ID3D12DeviceChild_GetDevice);
        result = mRealCommandQueue->GetDevice(riid, ppvDevice);
        interceptor->PostCall(this, FuncId_ID3D12DeviceChild_GetDevice, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->GetDevice(riid, ppvDevice);
    }

    if (ppvDevice != NULL && *ppvDevice != NULL)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        objectDatabase->WrappedObject((IUnknown**)ppvDevice);
    }

    return result;
}

void STDMETHODCALLTYPE GPS_ID3D12CommandQueue::UpdateTileMappings(ID3D12Resource* pResource, UINT NumResourceRegions, const D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates, const D3D12_TILE_REGION_SIZE* pResourceRegionSizes, ID3D12Heap* pHeap, UINT NumRanges, const D3D12_TILE_RANGE_FLAGS* pRangeFlags, const UINT* pHeapRangeStartOffsets, const UINT* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);
    ID3D12Heap* pHeapUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pHeap, &(pHeapUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %u, 0x%p, 0x%p, +0x%p, %u, 0x%p, %u, %u, %u", pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, *pHeapRangeStartOffsets, *pRangeTileCounts, Flags);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_UpdateTileMappings);
        mRealCommandQueue->UpdateTileMappings(pResourceUnwrapped, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeapUnwrapped, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_UpdateTileMappings, argumentsBuffer);
    }
    else
    {
        mRealCommandQueue->UpdateTileMappings(pResourceUnwrapped, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeapUnwrapped, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12CommandQueue::CopyTileMappings(ID3D12Resource* pDstResource, const D3D12_TILED_RESOURCE_COORDINATE* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, const D3D12_TILED_RESOURCE_COORDINATE* pSrcRegionStartCoordinate, const D3D12_TILE_REGION_SIZE* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags)
{
    ID3D12Resource* pDstResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pDstResource, &(pDstResourceUnwrapped), true);
    ID3D12Resource* pSrcResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pSrcResource, &(pSrcResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p, +0x%p, 0x%p, 0x%p, %u", pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, Flags);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_CopyTileMappings);
        mRealCommandQueue->CopyTileMappings(pDstResourceUnwrapped, pDstRegionStartCoordinate, pSrcResourceUnwrapped, pSrcRegionStartCoordinate, pRegionSize, Flags);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_CopyTileMappings, argumentsBuffer);
    }
    else
    {
        mRealCommandQueue->CopyTileMappings(pDstResourceUnwrapped, pDstRegionStartCoordinate, pSrcResourceUnwrapped, pSrcRegionStartCoordinate, pRegionSize, Flags);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12CommandQueue::ExecuteCommandLists(UINT NumCommandLists, ID3D12CommandList* const* ppCommandLists)
{
    ID3D12CommandList** ppCommandListsCopy = NULL;

    if (NumCommandLists > 0)
    {
        ppCommandListsCopy = new ID3D12CommandList*[NumCommandLists];

        for (UINT index = 0; index < NumCommandLists; index++)
        {
            DX12DeepCopy::Instance()->AssignInterface(ppCommandLists[index], &(ppCommandListsCopy[index]), true);
        }
    }

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s", NumCommandLists, PrintArrayWithFormatter(NumCommandLists, ppCommandLists, "0x%p").c_str());
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_ExecuteCommandLists);
        mRealCommandQueue->ExecuteCommandLists(NumCommandLists, ppCommandListsCopy);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_ExecuteCommandLists, argumentsBuffer);
    }
    else
    {
        mRealCommandQueue->ExecuteCommandLists(NumCommandLists, ppCommandListsCopy);
    }

    SAFE_DELETE_ARRAY(ppCommandListsCopy);
}

void STDMETHODCALLTYPE GPS_ID3D12CommandQueue::SetMarker(UINT Metadata, const void* pData, UINT Size)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, %u", Metadata, pData, Size);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_SetMarker);
        mRealCommandQueue->SetMarker(Metadata, pData, Size);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_SetMarker, argumentsBuffer);
    }
    else
    {
        mRealCommandQueue->SetMarker(Metadata, pData, Size);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12CommandQueue::BeginEvent(UINT Metadata, const void* pData, UINT Size)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %ls, %u", Metadata, static_cast<const wchar_t*>(pData), Size);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_BeginEvent);
        mRealCommandQueue->BeginEvent(Metadata, pData, Size);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_BeginEvent, argumentsBuffer);
    }
    else
    {
        mRealCommandQueue->BeginEvent(Metadata, pData, Size);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12CommandQueue::EndEvent()
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_EndEvent);
        mRealCommandQueue->EndEvent();
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_EndEvent, argumentsBuffer);
    }
    else
    {
        mRealCommandQueue->EndEvent();
    }
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::Signal(ID3D12Fence* pFence, UINT64 Value)
{
    HRESULT result = {};
    ID3D12Fence* pFenceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pFence, &(pFenceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %llu", pFence, Value);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_Signal);
        result = mRealCommandQueue->Signal(pFenceUnwrapped, Value);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_Signal, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->Signal(pFenceUnwrapped, Value);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::Wait(ID3D12Fence* pFence, UINT64 Value)
{
    HRESULT result = {};
    ID3D12Fence* pFenceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pFence, &(pFenceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %llu", pFence, Value);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_Wait);
        result = mRealCommandQueue->Wait(pFenceUnwrapped, Value);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_Wait, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->Wait(pFenceUnwrapped, Value);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::GetTimestampFrequency(UINT64* pFrequency)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%llu", *pFrequency);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_GetTimestampFrequency);
        result = mRealCommandQueue->GetTimestampFrequency(pFrequency);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_GetTimestampFrequency, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->GetTimestampFrequency(pFrequency);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12CommandQueue::GetClockCalibration(UINT64* pGpuTimestamp, UINT64* pCpuTimestamp)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%llu, %llu", *pGpuTimestamp, *pCpuTimestamp);
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_GetClockCalibration);
        result = mRealCommandQueue->GetClockCalibration(pGpuTimestamp, pCpuTimestamp);
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_GetClockCalibration, argumentsBuffer, result);
    }
    else
    {
        result = mRealCommandQueue->GetClockCalibration(pGpuTimestamp, pCpuTimestamp);
    }

    return result;
}

D3D12_COMMAND_QUEUE_DESC STDMETHODCALLTYPE GPS_ID3D12CommandQueue::GetDesc()
{
    D3D12_COMMAND_QUEUE_DESC result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12CommandQueue_GetDesc);
        result = mRealCommandQueue->GetDesc();
        interceptor->PostCall(this, FuncId_ID3D12CommandQueue_GetDesc, argumentsBuffer);
    }
    else
    {
        result = mRealCommandQueue->GetDesc();
    }

    return result;
}

bool WrapD3D12Device(ID3D12Device** inRealDevice, GPS_ID3D12DeviceCreateInfo* inCreateInfo = NULL)
{
    return GenericWrapObject<ID3D12Device, GPS_ID3D12DeviceCustom>(NULL, inRealDevice, kObjectType_ID3D12Device, inCreateInfo);
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::QueryInterface(REFIID riid, void** ppvObject)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p", refiidString.asCharArray(), ppvObject);
        interceptor->PreCall(this, FuncId_IUnknown_QueryInterface);
        result = mRealDevice->QueryInterface(riid, ppvObject);
        interceptor->PostCall(this, FuncId_IUnknown_QueryInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->QueryInterface(riid, ppvObject);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Device))
        {
            WrapD3D12Device((ID3D12Device**)ppvObject);
        }
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Device::AddRef()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_AddRef);
        result = mRealDevice->AddRef();
        interceptor->PostCall(this, FuncId_IUnknown_AddRef, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->AddRef();
    }

    return result;
}

ULONG STDMETHODCALLTYPE GPS_ID3D12Device::Release()
{
    ULONG result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_IUnknown_Release);
        result = mRealDevice->Release();
        interceptor->PostCall(this, FuncId_IUnknown_Release, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->Release();
    }

    if (result == 0)
    {
        DX12WrappedObjectDatabase* objectDatabase = (DX12WrappedObjectDatabase*)DX12ObjectDatabaseProcessor::Instance()->GetObjectDatabase();
        IDX12InstanceBase* objectMetadata = objectDatabase->GetMetadataObject(this);

        if (objectMetadata != NULL)
        {
            objectMetadata->FlagAsDestroyed();
        }

        objectDatabase->OnDeviceDestroyed(objectMetadata);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), *pDataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_GetPrivateData);
        result = mRealDevice->GetPrivateData(guid, pDataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_GetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->GetPrivateData(guid, pDataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::SetPrivateData(REFGUID guid, UINT DataSize, const void* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %u, 0x%p", DX12Util::PrintGUID(guid), DataSize, pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateData);
        result = mRealDevice->SetPrivateData(guid, DataSize, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateData, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->SetPrivateData(guid, DataSize, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::SetPrivateDataInterface(REFGUID guid, const IUnknown* pData)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, +0x%p", DX12Util::PrintGUID(guid), pData);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetPrivateDataInterface);
        result = mRealDevice->SetPrivateDataInterface(guid, pData);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetPrivateDataInterface, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->SetPrivateDataInterface(guid, pData);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::SetName(LPCWSTR Name)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls", Name);
        interceptor->PreCall(this, FuncId_ID3D12Object_SetName);
        result = mRealDevice->SetName(Name);
        interceptor->PostCall(this, FuncId_ID3D12Object_SetName, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->SetName(Name);
    }

    return result;
}

UINT STDMETHODCALLTYPE GPS_ID3D12Device::GetNodeCount()
{
    UINT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Device_GetNodeCount);
        result = mRealDevice->GetNodeCount();
        interceptor->PostCall(this, FuncId_ID3D12Device_GetNodeCount, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->GetNodeCount();
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateCommandQueue(const D3D12_COMMAND_QUEUE_DESC* pDesc, REFIID riid, void** ppCommandQueue)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", pDesc, refiidString.asCharArray(), ppCommandQueue);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateCommandQueue);
        result = mRealDevice->CreateCommandQueue(pDesc, riid, ppCommandQueue);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateCommandQueue, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateCommandQueue(pDesc, riid, ppCommandQueue);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandQueue))
        {
            GPS_ID3D12CommandQueueCreateInfo* createInfo = new GPS_ID3D12CommandQueueCreateInfo(pDesc);
            WrapD3D12CommandQueue(this, (ID3D12CommandQueue**)ppCommandQueue, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE type, REFIID riid, void** ppCommandAllocator)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, %s, 0x%p", DX12CoreSerializers::WriteCommandListTypeEnumAsString(type), refiidString.asCharArray(), ppCommandAllocator);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateCommandAllocator);
        result = mRealDevice->CreateCommandAllocator(type, riid, ppCommandAllocator);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateCommandAllocator, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateCommandAllocator(type, riid, ppCommandAllocator);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandAllocator))
        {
            GPS_ID3D12CommandAllocatorCreateInfo* createInfo = new GPS_ID3D12CommandAllocatorCreateInfo(type);
            WrapD3D12CommandAllocator(this, (ID3D12CommandAllocator**)ppCommandAllocator, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateGraphicsPipelineState(const D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, REFIID riid, void** ppPipelineState)
{
    HRESULT result = {};
    D3D12_GRAPHICS_PIPELINE_STATE_DESC pDescUnwrapped;
    DX12DeepCopy::Instance()->DeepCopy(pDesc, &pDescUnwrapped, true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", pDesc, refiidString.asCharArray(), ppPipelineState);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateGraphicsPipelineState);
        result = mRealDevice->CreateGraphicsPipelineState(&pDescUnwrapped, riid, ppPipelineState);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateGraphicsPipelineState, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateGraphicsPipelineState(&pDescUnwrapped, riid, ppPipelineState);
    }

    if (result == S_OK)
    {
        GPS_ID3D12GraphicsPipelineStateCreateInfo* createInfo = new GPS_ID3D12GraphicsPipelineStateCreateInfo(pDesc);
        WrapD3D12PipelineState(this, (ID3D12PipelineState**)ppPipelineState, createInfo);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateComputePipelineState(const D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, REFIID riid, void** ppPipelineState)
{
    HRESULT result = {};
    D3D12_COMPUTE_PIPELINE_STATE_DESC pDescUnwrapped;
    DX12DeepCopy::Instance()->DeepCopy(pDesc, &pDescUnwrapped, true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", pDesc, refiidString.asCharArray(), ppPipelineState);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateComputePipelineState);
        result = mRealDevice->CreateComputePipelineState(&pDescUnwrapped, riid, ppPipelineState);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateComputePipelineState, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateComputePipelineState(&pDescUnwrapped, riid, ppPipelineState);
    }

    if (result == S_OK)
    {
        GPS_ID3D12ComputePipelineStateCreateInfo* createInfo = new GPS_ID3D12ComputePipelineStateCreateInfo(pDesc);
        WrapD3D12PipelineState(this, (ID3D12PipelineState**)ppPipelineState, createInfo);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateCommandList(UINT nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, REFIID riid, void** ppCommandList)
{
    HRESULT result = {};
    ID3D12CommandAllocator* pCommandAllocatorUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pCommandAllocator, &(pCommandAllocatorUnwrapped), true);
    ID3D12PipelineState* pInitialStateUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pInitialState, &(pInitialStateUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s, +0x%p, +0x%p, %s, 0x%p", nodeMask, DX12CoreSerializers::WriteCommandListTypeEnumAsString(type), pCommandAllocator, pInitialState, refiidString.asCharArray(), ppCommandList);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateCommandList);
        result = mRealDevice->CreateCommandList(nodeMask, type, pCommandAllocatorUnwrapped, pInitialStateUnwrapped, riid, ppCommandList);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateCommandList, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateCommandList(nodeMask, type, pCommandAllocatorUnwrapped, pInitialStateUnwrapped, riid, ppCommandList);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandList))
        {
            Log(logWARNING, "Created type 'ID3D12CommandList'. It was wrapped, but couldn't store CreateInfo.\n");
            WrapD3D12CommandList(this, (ID3D12CommandList**)ppCommandList);
        }
        else if (riid == __uuidof(ID3D12GraphicsCommandList))
        {
            GPS_ID3D12CommandListCreateInfo* createInfo = new GPS_ID3D12CommandListCreateInfo(nodeMask, type, static_cast<GPS_ID3D12CommandAllocator*>(pCommandAllocator), static_cast<GPS_ID3D12PipelineState*>(pInitialState));
            WrapD3D12GraphicsCommandList(this, (ID3D12GraphicsCommandList**)ppCommandList, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CheckFeatureSupport(D3D12_FEATURE Feature, void* pFeatureSupportData, UINT FeatureSupportDataSize)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s, 0x%p, %u", DX12CoreSerializers::WriteFeatureEnumAsString(Feature), pFeatureSupportData, FeatureSupportDataSize);
        interceptor->PreCall(this, FuncId_ID3D12Device_CheckFeatureSupport);
        result = mRealDevice->CheckFeatureSupport(Feature, pFeatureSupportData, FeatureSupportDataSize);
        interceptor->PostCall(this, FuncId_ID3D12Device_CheckFeatureSupport, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CheckFeatureSupport(Feature, pFeatureSupportData, FeatureSupportDataSize);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateDescriptorHeap(const D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, REFIID riid, void** ppvHeap)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", pDescriptorHeapDesc, refiidString.asCharArray(), ppvHeap);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateDescriptorHeap);
        result = mRealDevice->CreateDescriptorHeap(pDescriptorHeapDesc, riid, ppvHeap);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateDescriptorHeap, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateDescriptorHeap(pDescriptorHeapDesc, riid, ppvHeap);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12DescriptorHeap))
        {
            GPS_ID3D12DescriptorHeapCreateInfo* createInfo = new GPS_ID3D12DescriptorHeapCreateInfo(pDescriptorHeapDesc);
            WrapD3D12DescriptorHeap(this, (ID3D12DescriptorHeap**)ppvHeap, createInfo);
        }
    }

    return result;
}

UINT STDMETHODCALLTYPE GPS_ID3D12Device::GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
{
    UINT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s", DX12CoreSerializers::WriteDescriptorHeapTypeEnumAsString(DescriptorHeapType));
        interceptor->PreCall(this, FuncId_ID3D12Device_GetDescriptorHandleIncrementSize);
        result = mRealDevice->GetDescriptorHandleIncrementSize(DescriptorHeapType);
        interceptor->PostCall(this, FuncId_ID3D12Device_GetDescriptorHandleIncrementSize, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->GetDescriptorHandleIncrementSize(DescriptorHeapType);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateRootSignature(UINT nodeMask, const void* pBlobWithRootSignature, SIZE_T blobLengthInBytes, REFIID riid, void** ppvRootSignature)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, %Iu, %s, 0x%p", nodeMask, pBlobWithRootSignature, blobLengthInBytes, refiidString.asCharArray(), ppvRootSignature);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateRootSignature);
        result = mRealDevice->CreateRootSignature(nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateRootSignature, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateRootSignature(nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12RootSignature))
        {
            GPS_ID3D12RootSignatureCreateInfo* createInfo = new GPS_ID3D12RootSignatureCreateInfo(nodeMask, pBlobWithRootSignature, blobLengthInBytes);
            WrapD3D12RootSignature(this, (ID3D12RootSignature**)ppvRootSignature, createInfo);
        }
    }

    return result;
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CreateConstantBufferView(const D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, 0x%p", pDesc, (void*)DestDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateConstantBufferView);
        mRealDevice->CreateConstantBufferView(pDesc, DestDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateConstantBufferView, argumentsBuffer);
    }
    else
    {
        mRealDevice->CreateConstantBufferView(pDesc, DestDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CreateShaderResourceView(ID3D12Resource* pResource, const D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p, 0x%p", pResource, pDesc, (void*)DestDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateShaderResourceView);
        mRealDevice->CreateShaderResourceView(pResourceUnwrapped, pDesc, DestDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateShaderResourceView, argumentsBuffer);
    }
    else
    {
        mRealDevice->CreateShaderResourceView(pResourceUnwrapped, pDesc, DestDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, const D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);
    ID3D12Resource* pCounterResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pCounterResource, &(pCounterResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, +0x%p, 0x%p, 0x%p", pResource, pCounterResource, pDesc, (void*)DestDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateUnorderedAccessView);
        mRealDevice->CreateUnorderedAccessView(pResourceUnwrapped, pCounterResourceUnwrapped, pDesc, DestDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateUnorderedAccessView, argumentsBuffer);
    }
    else
    {
        mRealDevice->CreateUnorderedAccessView(pResourceUnwrapped, pCounterResourceUnwrapped, pDesc, DestDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CreateRenderTargetView(ID3D12Resource* pResource, const D3D12_RENDER_TARGET_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p, 0x%p", pResource, pDesc, (void*)DestDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateRenderTargetView);
        mRealDevice->CreateRenderTargetView(pResourceUnwrapped, pDesc, DestDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateRenderTargetView, argumentsBuffer);
    }
    else
    {
        mRealDevice->CreateRenderTargetView(pResourceUnwrapped, pDesc, DestDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CreateDepthStencilView(ID3D12Resource* pResource, const D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
{
    ID3D12Resource* pResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pResource, &(pResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p, 0x%p", pResource, pDesc, (void*)DestDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateDepthStencilView);
        mRealDevice->CreateDepthStencilView(pResourceUnwrapped, pDesc, DestDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateDepthStencilView, argumentsBuffer);
    }
    else
    {
        mRealDevice->CreateDepthStencilView(pResourceUnwrapped, pDesc, DestDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CreateSampler(const D3D12_SAMPLER_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, 0x%p", pDesc, (void*)DestDescriptor.ptr);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateSampler);
        mRealDevice->CreateSampler(pDesc, DestDescriptor);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateSampler, argumentsBuffer);
    }
    else
    {
        mRealDevice->CreateSampler(pDesc, DestDescriptor);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CopyDescriptors(UINT NumDestDescriptorRanges, const D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, const UINT* pDestDescriptorRangeSizes, UINT NumSrcDescriptorRanges, const D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, const UINT* pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        // Build a string with the array of destination ranges if there are any.
        gtASCIIString destRangesString;

        if (NumDestDescriptorRanges > 0)
        {
            destRangesString.appendFormattedString(PrintArrayWithFormatter(NumDestDescriptorRanges, pDestDescriptorRangeStarts, "0x%p").c_str(), ", %s");
        }

        if (pDestDescriptorRangeSizes != NULL)
        {
            destRangesString.appendFormattedString(PrintArrayWithFormatter(NumDestDescriptorRanges, pDestDescriptorRangeSizes, "%u").c_str(), ", %s");
        }

        // Build a string with the array of source ranges if there are any.
        gtASCIIString srcRangesString;

        if (NumSrcDescriptorRanges > 0)
        {
            srcRangesString.appendFormattedString(PrintArrayWithFormatter(NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, "0x%p").c_str(), ", %s");
        }

        if (pSrcDescriptorRangeSizes != NULL)
        {
            srcRangesString.appendFormattedString(PrintArrayWithFormatter(NumSrcDescriptorRanges, pSrcDescriptorRangeSizes, "%u").c_str(), ", %s");
        }

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s, %u, %s, %s", NumDestDescriptorRanges, destRangesString.asCharArray(), NumSrcDescriptorRanges, srcRangesString.asCharArray(), DX12CoreSerializers::WriteDescriptorHeapTypeEnumAsString(DescriptorHeapsType));

        interceptor->PreCall(this, FuncId_ID3D12Device_CopyDescriptors);
        mRealDevice->CopyDescriptors(NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
        interceptor->PostCall(this, FuncId_ID3D12Device_CopyDescriptors, argumentsBuffer);
    }
    else
    {
        mRealDevice->CopyDescriptors(NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
    }
}

void STDMETHODCALLTYPE GPS_ID3D12Device::CopyDescriptorsSimple(UINT NumDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, 0x%p, 0x%p, %s", NumDescriptors, (void*)DestDescriptorRangeStart.ptr, (void*)SrcDescriptorRangeStart.ptr, DX12CoreSerializers::WriteDescriptorHeapTypeEnumAsString(DescriptorHeapsType));
        interceptor->PreCall(this, FuncId_ID3D12Device_CopyDescriptorsSimple);
        mRealDevice->CopyDescriptorsSimple(NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
        interceptor->PostCall(this, FuncId_ID3D12Device_CopyDescriptorsSimple, argumentsBuffer);
    }
    else
    {
        mRealDevice->CopyDescriptorsSimple(NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
    }
}

D3D12_RESOURCE_ALLOCATION_INFO STDMETHODCALLTYPE GPS_ID3D12Device::GetResourceAllocationInfo(UINT visibleMask, UINT numResourceDescs, const D3D12_RESOURCE_DESC* pResourceDescs)
{
    D3D12_RESOURCE_ALLOCATION_INFO result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %u, 0x%p", visibleMask, numResourceDescs, pResourceDescs);
        interceptor->PreCall(this, FuncId_ID3D12Device_GetResourceAllocationInfo);
        result = mRealDevice->GetResourceAllocationInfo(visibleMask, numResourceDescs, pResourceDescs);
        interceptor->PostCall(this, FuncId_ID3D12Device_GetResourceAllocationInfo, argumentsBuffer);
    }
    else
    {
        result = mRealDevice->GetResourceAllocationInfo(visibleMask, numResourceDescs, pResourceDescs);
    }

    return result;
}

D3D12_HEAP_PROPERTIES STDMETHODCALLTYPE GPS_ID3D12Device::GetCustomHeapProperties(UINT nodeMask, D3D12_HEAP_TYPE heapType)
{
    D3D12_HEAP_PROPERTIES result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s", nodeMask, DX12CoreSerializers::WriteHeapTypeEnumAsString(heapType));
        interceptor->PreCall(this, FuncId_ID3D12Device_GetCustomHeapProperties);
        result = mRealDevice->GetCustomHeapProperties(nodeMask, heapType);
        interceptor->PostCall(this, FuncId_ID3D12Device_GetCustomHeapProperties, argumentsBuffer);
    }
    else
    {
        result = mRealDevice->GetCustomHeapProperties(nodeMask, heapType);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateCommittedResource(const D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const D3D12_RESOURCE_DESC* pResourceDesc, D3D12_RESOURCE_STATES InitialResourceState, const D3D12_CLEAR_VALUE* pOptimizedClearValue, REFIID riidResource, void** ppvResource)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString riidResourceString;
        DX12Util::PrintREFIID(riidResource, riidResourceString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %u, 0x%p, %s, 0x%p, %s, 0x%p", pHeapProperties, HeapFlags, pResourceDesc, DX12CoreSerializers::WriteResourceStatesEnumAsString(InitialResourceState), pOptimizedClearValue, riidResourceString.asCharArray(), ppvResource);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateCommittedResource);
        result = mRealDevice->CreateCommittedResource(pHeapProperties, HeapFlags, pResourceDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateCommittedResource, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateCommittedResource(pHeapProperties, HeapFlags, pResourceDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
    }

    if (result == S_OK)
    {
        if (riidResource == __uuidof(ID3D12Resource))
        {
            GPS_ID3D12ComittedResourceCreateInfo* createInfo = new GPS_ID3D12ComittedResourceCreateInfo(pHeapProperties, HeapFlags, pResourceDesc, InitialResourceState, pOptimizedClearValue);
            WrapD3D12Resource(this, (ID3D12Resource**)ppvResource, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateHeap(const D3D12_HEAP_DESC* pDesc, REFIID riid, void** ppvHeap)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", pDesc, refiidString.asCharArray(), ppvHeap);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateHeap);
        result = mRealDevice->CreateHeap(pDesc, riid, ppvHeap);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateHeap, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateHeap(pDesc, riid, ppvHeap);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Heap))
        {
            GPS_ID3D12HeapCreateInfo* createInfo = new GPS_ID3D12HeapCreateInfo(pDesc);
            WrapD3D12Heap(this, (ID3D12Heap**)ppvHeap, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreatePlacedResource(ID3D12Heap* pHeap, UINT64 HeapOffset, const D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE* pOptimizedClearValue, REFIID riid, void** ppvResource)
{
    HRESULT result = {};
    ID3D12Heap* pHeapUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pHeap, &(pHeapUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %llu, 0x%p, %s, 0x%p, %s, 0x%p", pHeap, HeapOffset, pDesc, DX12CoreSerializers::WriteResourceStatesEnumAsString(InitialState), pOptimizedClearValue, refiidString.asCharArray(), ppvResource);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreatePlacedResource);
        result = mRealDevice->CreatePlacedResource(pHeapUnwrapped, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreatePlacedResource, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreatePlacedResource(pHeapUnwrapped, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Resource))
        {
            GPS_ID3D12PlacedResourceCreateInfo* createInfo = new GPS_ID3D12PlacedResourceCreateInfo(static_cast<GPS_ID3D12Heap*>(pHeap), HeapOffset, pDesc, InitialState, pOptimizedClearValue);
            WrapD3D12Resource(this, (ID3D12Resource**)ppvResource, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateReservedResource(const D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE* pOptimizedClearValue, REFIID riid, void** ppvResource)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p, %s, 0x%p", pDesc, DX12CoreSerializers::WriteResourceStatesEnumAsString(InitialState), pOptimizedClearValue, refiidString.asCharArray(), ppvResource);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateReservedResource);
        result = mRealDevice->CreateReservedResource(pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateReservedResource, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateReservedResource(pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Resource))
        {
            GPS_ID3D12ReservedResourceCreateInfo* createInfo = new GPS_ID3D12ReservedResourceCreateInfo(pDesc, InitialState, pOptimizedClearValue);
            WrapD3D12Resource(this, (ID3D12Resource**)ppvResource, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateSharedHandle(ID3D12DeviceChild* pObject, const SECURITY_ATTRIBUTES* pAttributes, DWORD Access, LPCWSTR Name, HANDLE* pHandle)
{
    HRESULT result = {};
    ID3D12DeviceChild* pObjectUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pObject, &(pObjectUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, 0x%p, %u, %ls, 0x%p", pObject, pAttributes, Access, Name, pHandle);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateSharedHandle);
        result = mRealDevice->CreateSharedHandle(pObjectUnwrapped, pAttributes, Access, Name, pHandle);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateSharedHandle, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateSharedHandle(pObjectUnwrapped, pAttributes, Access, Name, pHandle);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::OpenSharedHandle(HANDLE NTHandle, REFIID riid, void** ppvObj)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", NTHandle, refiidString.asCharArray(), ppvObj);
        interceptor->PreCall(this, FuncId_ID3D12Device_OpenSharedHandle);
        result = mRealDevice->OpenSharedHandle(NTHandle, riid, ppvObj);
        interceptor->PostCall(this, FuncId_ID3D12Device_OpenSharedHandle, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->OpenSharedHandle(NTHandle, riid, ppvObj);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::OpenSharedHandleByName(LPCWSTR Name, DWORD Access, HANDLE* pNTHandle)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%ls, %u, 0x%p", Name, Access, pNTHandle);
        interceptor->PreCall(this, FuncId_ID3D12Device_OpenSharedHandleByName);
        result = mRealDevice->OpenSharedHandleByName(Name, Access, pNTHandle);
        interceptor->PostCall(this, FuncId_ID3D12Device_OpenSharedHandleByName, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->OpenSharedHandleByName(Name, Access, pNTHandle);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::MakeResident(UINT NumObjects, ID3D12Pageable* const* ppObjects)
{
    HRESULT result = {};

    ID3D12Pageable** ppObjectsUnwrapped = NULL;

    if (NumObjects > 0)
    {
        ppObjectsUnwrapped = new ID3D12Pageable*[NumObjects];

        for (UINT index = 0; index < NumObjects; index++)
        {
            DX12DeepCopy::Instance()->AssignInterface(ppObjects[index], &(ppObjectsUnwrapped[index]), true);
        }
    }

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s", NumObjects, PrintArrayWithFormatter(NumObjects, ppObjects, "0x%p").c_str());
        interceptor->PreCall(this, FuncId_ID3D12Device_MakeResident);
        result = mRealDevice->MakeResident(NumObjects, ppObjectsUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12Device_MakeResident, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->MakeResident(NumObjects, ppObjectsUnwrapped);
    }

    SAFE_DELETE_ARRAY(ppObjectsUnwrapped);

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::Evict(UINT NumObjects, ID3D12Pageable* const* ppObjects)
{
    HRESULT result = {};

    ID3D12Pageable** ppObjectsUnwrapped = NULL;

    if (NumObjects > 0)
    {
        ppObjectsUnwrapped = new ID3D12Pageable*[NumObjects];

        for (UINT index = 0; index < NumObjects; index++)
        {
            DX12DeepCopy::Instance()->AssignInterface(ppObjects[index], &(ppObjectsUnwrapped[index]), true);
        }
    }

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%u, %s", NumObjects, PrintArrayWithFormatter(NumObjects, ppObjects, "0x%p").c_str());
        interceptor->PreCall(this, FuncId_ID3D12Device_Evict);
        result = mRealDevice->Evict(NumObjects, ppObjectsUnwrapped);
        interceptor->PostCall(this, FuncId_ID3D12Device_Evict, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->Evict(NumObjects, ppObjectsUnwrapped);
    }

    SAFE_DELETE_ARRAY(ppObjectsUnwrapped);

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateFence(UINT64 InitialValue, D3D12_FENCE_FLAGS Flags, REFIID riid, void** ppFence)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%llu, %u, %s, 0x%p", InitialValue, Flags, refiidString.asCharArray(), ppFence);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateFence);
        result = mRealDevice->CreateFence(InitialValue, Flags, riid, ppFence);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateFence, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateFence(InitialValue, Flags, riid, ppFence);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12Fence))
        {
            GPS_ID3D12FenceCreateInfo* createInfo = new GPS_ID3D12FenceCreateInfo(InitialValue, Flags);
            WrapD3D12Fence(this, (ID3D12Fence**)ppFence, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::GetDeviceRemovedReason()
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Device_GetDeviceRemovedReason);
        result = mRealDevice->GetDeviceRemovedReason();
        interceptor->PostCall(this, FuncId_ID3D12Device_GetDeviceRemovedReason, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->GetDeviceRemovedReason();
    }

    return result;
}

void STDMETHODCALLTYPE GPS_ID3D12Device::GetCopyableFootprints(const D3D12_RESOURCE_DESC* pResourceDesc, UINT FirstSubresource, UINT NumSubresources, UINT64 BaseOffset, D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, UINT* pNumRows, UINT64* pRowSizeInBytes, UINT64* pTotalBytes)
{
    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        UINT numRows = pNumRows != NULL ? *pNumRows : 0;
        UINT64 rowSizeInBytes = pRowSizeInBytes != NULL ? *pRowSizeInBytes : 0;
        UINT64 totalBytes = pTotalBytes != NULL ? *pTotalBytes : 0;

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %u, %u, %llu, 0x%p, %u, %llu, %llu", pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, numRows, rowSizeInBytes, totalBytes);
        interceptor->PreCall(this, FuncId_ID3D12Device_GetCopyableFootprints);
        mRealDevice->GetCopyableFootprints(pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
        interceptor->PostCall(this, FuncId_ID3D12Device_GetCopyableFootprints, argumentsBuffer);
    }
    else
    {
        mRealDevice->GetCopyableFootprints(pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
    }
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateQueryHeap(const D3D12_QUERY_HEAP_DESC* pDesc, REFIID riid, void** ppvHeap)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, %s, 0x%p", pDesc, refiidString.asCharArray(), ppvHeap);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateQueryHeap);
        result = mRealDevice->CreateQueryHeap(pDesc, riid, ppvHeap);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateQueryHeap, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateQueryHeap(pDesc, riid, ppvHeap);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12QueryHeap))
        {
            GPS_ID3D12QueryHeapCreateInfo* createInfo = new GPS_ID3D12QueryHeapCreateInfo(pDesc);
            WrapD3D12QueryHeap(this, (ID3D12QueryHeap**)ppvHeap, createInfo);
        }
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::SetStablePowerState(BOOL Enable)
{
    HRESULT result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "%s", Enable?"TRUE":"FALSE");
        interceptor->PreCall(this, FuncId_ID3D12Device_SetStablePowerState);
        result = mRealDevice->SetStablePowerState(Enable);
        interceptor->PostCall(this, FuncId_ID3D12Device_SetStablePowerState, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->SetStablePowerState(Enable);
    }

    return result;
}

HRESULT STDMETHODCALLTYPE GPS_ID3D12Device::CreateCommandSignature(const D3D12_COMMAND_SIGNATURE_DESC* pDesc, ID3D12RootSignature* pRootSignature, REFIID riid, void** ppvCommandSignature)
{
    HRESULT result = {};
    ID3D12RootSignature* pRootSignatureUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pRootSignature, &(pRootSignatureUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];
        gtASCIIString refiidString;
        DX12Util::PrintREFIID(riid, refiidString);
        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "0x%p, +0x%p, %s, 0x%p", pDesc, pRootSignature, refiidString.asCharArray(), ppvCommandSignature);
        interceptor->PreCall(this, FuncId_ID3D12Device_CreateCommandSignature);
        result = mRealDevice->CreateCommandSignature(pDesc, pRootSignatureUnwrapped, riid, ppvCommandSignature);
        interceptor->PostCall(this, FuncId_ID3D12Device_CreateCommandSignature, argumentsBuffer, result);
    }
    else
    {
        result = mRealDevice->CreateCommandSignature(pDesc, pRootSignatureUnwrapped, riid, ppvCommandSignature);
    }

    if (result == S_OK)
    {
        if (riid == __uuidof(ID3D12CommandSignature))
        {
            GPS_ID3D12CommandSignatureCreateInfo* createInfo = new GPS_ID3D12CommandSignatureCreateInfo(pDesc, static_cast<GPS_ID3D12RootSignature*>(pRootSignature));
            WrapD3D12CommandSignature(this, (ID3D12CommandSignature**)ppvCommandSignature, createInfo);
        }
    }

    return result;
}

void STDMETHODCALLTYPE GPS_ID3D12Device::GetResourceTiling(ID3D12Resource* pTiledResource, UINT* pNumTilesForEntireResource, D3D12_PACKED_MIP_INFO* pPackedMipDesc, D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, UINT* pNumSubresourceTilings, UINT FirstSubresourceTilingToGet, D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
{
    ID3D12Resource* pTiledResourceUnwrapped;
    DX12DeepCopy::Instance()->AssignInterface(pTiledResource, &(pTiledResourceUnwrapped), true);

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "+0x%p, %u, 0x%p, 0x%p, %u, %u, 0x%p", pTiledResource, *pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, *pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        interceptor->PreCall(this, FuncId_ID3D12Device_GetResourceTiling);
        mRealDevice->GetResourceTiling(pTiledResourceUnwrapped, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        interceptor->PostCall(this, FuncId_ID3D12Device_GetResourceTiling, argumentsBuffer);
    }
    else
    {
        mRealDevice->GetResourceTiling(pTiledResourceUnwrapped, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
    }
}

LUID STDMETHODCALLTYPE GPS_ID3D12Device::GetAdapterLuid()
{
    LUID result = {};

    DX12Interceptor* interceptor = GetDX12LayerManager()->GetInterceptor();

    if (interceptor->ShouldCollectTrace())
    {
        char argumentsBuffer[ARGUMENTS_BUFFER_SIZE];

        sprintf_s(argumentsBuffer, ARGUMENTS_BUFFER_SIZE, "");
        interceptor->PreCall(this, FuncId_ID3D12Device_GetAdapterLuid);
        result = mRealDevice->GetAdapterLuid();
        interceptor->PostCall(this, FuncId_ID3D12Device_GetAdapterLuid, argumentsBuffer);
    }
    else
    {
        result = mRealDevice->GetAdapterLuid();
    }

    return result;
}