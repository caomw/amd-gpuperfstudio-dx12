//==============================================================================
// Copyright (c) 2015 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief  The location where hand-written custom implementations of DX12 wrapper functions live.
//==============================================================================

#ifndef DX12CUSTOMWRAPPERS_H
#define DX12CUSTOMWRAPPERS_H

#include "Autogenerated/DX12CoreWrappers.h"

//--------------------------------------------------------------------------
/// A ID3D12Device interface wrapper. This implementation provides a customizable
/// layer above the autogenerated implementation. Add specialized logic here that
/// can't easily be inserted into the output generated code.
//--------------------------------------------------------------------------
class GPS_ID3D12DeviceCustom : public GPS_ID3D12Device
{
public:
    GPS_ID3D12DeviceCustom(ID3D12Device* inRealDevice) : GPS_ID3D12Device(inRealDevice) {}
    virtual ~GPS_ID3D12DeviceCustom() {}

    virtual HRESULT STDMETHODCALLTYPE CreateCommandList(UINT nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, REFIID riid, void** ppCommandList);
};

class GPS_ID3D12GraphicsCommandListCustom : public GPS_ID3D12GraphicsCommandList
{
public:
    GPS_ID3D12GraphicsCommandListCustom(ID3D12GraphicsCommandList* inRealCommandList) : GPS_ID3D12GraphicsCommandList(inRealCommandList) {}
    virtual ~GPS_ID3D12GraphicsCommandListCustom() {}

    virtual ULONG STDMETHODCALLTYPE Release();
};

//--------------------------------------------------------------------------
/// A ID3D12CommandQueue interface wrapper. This implementation provides a customizable
/// layer above the autogenerated implementation. Add specialized logic here that
/// can't easily be inserted into the output generated code.
//--------------------------------------------------------------------------

class GPS_ID3D12CommandQueueCustom : public GPS_ID3D12CommandQueue
{
public:
    GPS_ID3D12CommandQueueCustom(ID3D12CommandQueue* inRealCommandQueue);

    virtual ~GPS_ID3D12CommandQueueCustom();

    //--------------------------------------------------------------------------
    /// A custom override used to track which Queue is responsible for executing CommandLists.
    /// \param NumCommandLists The number of CommandLists in the array to execute.
    /// \param ppCommandLists An array of CommandLists to execute through the Queue.
    //--------------------------------------------------------------------------
    void STDMETHODCALLTYPE ExecuteCommandLists(UINT NumCommandLists, ID3D12CommandList* const* ppCommandLists);

private:

#if USE_GPA_PROFILING
    //--------------------------------------------------------------------------
    /// Check whether the specified fence is complete.
    /// \param fenceValue The fence to check
    /// \return true if the fence is complete
    //--------------------------------------------------------------------------
    bool IsFenceComplete(UINT64 fenceValue);

    //--------------------------------------------------------------------------
    /// Waits for the specified fence to complete.
    /// \param fenceValue The fence to check
    //--------------------------------------------------------------------------
    void WaitForFence(UINT64 fenceValue);

    ID3D12Fence* m_pFence;                   ///< Fence used for waiting for a command list to complete
    UINT64       m_nextFenceValue;           ///< Next fence value
    UINT64       m_lastCompletedFenceValue;  ///< Previously completed fence value
    HANDLE       m_fenceEvent;               ///< fence event handle
#endif
};

#endif // DX12CUSTOMWRAPPERS_H